// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  koreanLevel   Int?      @default(0)
  learningGoal  String?   // TOPIK, University, Career, Marriage
  nativeLanguage String?  @default("en")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  progress      Progress[]
  achievements  Achievement[]
  conversations Conversation[]
  quizAttempts  QuizAttempt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  skill       String   // reading, writing, listening, speaking, culture
  level       Int
  score       Float
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  type        String   // streak, level, quiz, conversation
  title       String
  description String
  icon        String
  earnedAt    DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id          String   @id @default(cuid())
  userId      String
  partnerType String   // friend, teacher, colleague, family, service
  messages    String   // JSON string of message objects
  duration    Int      // in seconds
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Float
  totalQuestions Int
  correctAnswers Int
  timeSpent   Int      // in seconds
  completedAt DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  level       Int
  skill       String   // reading, writing, listening, speaking, culture
  content     String   // JSON string of lesson content structure
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Quiz {
  id          String   @id @default(cuid())
  lessonId    String?
  title       String
  description String?
  questions   String   // JSON string of question objects
  level       Int
  skill       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model KContent {
  id          String   @id @default(cuid())
  title       String
  type        String   // kpop, kdrama, cuisine, variety, travel
  youtubeId    String?
  description String?
  level       Int
  vocabulary  String?  // JSON string of extracted vocabulary
  culturalNotes String?  // JSON string of cultural context
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
